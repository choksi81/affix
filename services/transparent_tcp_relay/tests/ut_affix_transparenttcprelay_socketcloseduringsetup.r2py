"""
Overloads a nat forwarder with a low max-client limitation.

Makes sure that the forwarder and affix stack behave in an expected manner
when this event occurs.  We expect to see an AddressBindingError on the
server when this occurs.

"""
#pragma out 

#pragma repy restrictions.affix dylink.r2py


# required for logging
time = dy_import_module('time.r2py')
#time1 = dy_import_module('time_interface.r2py')
#ntp_time = dy_import_module('ntp_time.r2py')
#time1.time_register_method('ntp', ntp_time.ntp_time_updatetime)
time.time_updatetime(34612)

# Make a list of usable source ports for connections
random = dy_import_module("random.r2py")
available_ports = list(getresources()[0]["connport"])
random.random_shuffle(available_ports)


tcp_relay = dy_import_module('transparent_tcp_relay.r2py')
tcp_relay.MAX_CLIENTS_PER_SERVER = 1
tcp_relay.MAX_SERVERS = 1

tcp_relay.mycontext['listenport_tcp'] = 12345
createthread(tcp_relay.tcp_forwarder_listener)
forwarder_port = 12345


log("Setting up NAT forwarder.\n")
log("NAT forwarder started.\n")
log("Starting botched setup attempt.\n")
# Emulate TCPRelayAffix's NAT forwarder connection setup, 
# see TCPRelayAffix.connect_to_forwarder()
server_port = available_ports.pop()
sockobj = openconnection(getmyip(), forwarder_port, getmyip(), server_port, 10)
# We would now use a timeoutsocket to register etc., but we're in for trouble!
# Send an incomplete message, then drop the connection unexpectedly.
sockobj.send("100\n" + 'NAT_SERVER_REGISTER' + "," + 
    getmyip() + "," + str(server_port))
sockobj.close()
log("Done with botched setup attempt.\n")
log("Setting up RepyV2 TCP connection test now.\n")

# The forwarder should (1) stay alive and (2) dergister the previous server 
# so that the MAX_SERVERS limit is restored to 1. We'll check by 
# re-registering and running the TCP connection test.



dy_import_module_symbols("affix_stack.r2py")

# Set up the Affix stack to use, and override the network calls we need.
# We'll host the forwarder ourselves for this test.
affix_object = AffixStack("(TransparentTCPRelayAffix," + getmyip() + ":" + 
    str(forwarder_port) + ":" + str(25) + ")")
listenforconnection = affix_object.listenforconnection
#openconnection = affix_object.openconnection


# Connect to the forwarder, send/receive a test message.
dy_import_module_symbols("ut_repyv2api_tcpconnectiontest.r2py")
createthread(launch_server)
sleep(5)

"""
createthread(connect_and_send_message)
sleep(10)
"""

exitall()